{"version":3,"sources":["components/subComponents/Button.js","data/dropdownContent.js","actions/actionTypes.js","components/subComponents/Dropdown.js","components/subComponents/DropdownCard.js","components/subComponents/InfoCard.js","components/subComponents/FlippingCard.js","components/mainComponents/SettingsPanel.js","components/subComponents/ActionBox.js","data/actionBoxData.js","components/mainComponents/DemoScreen.js","data/demoScreenData.js","App.js","data/store.js","reducers/index.js","index.js"],"names":["connect","toDispatch","btnSign","dispatch","className","onClick","type","text","payload","clickHandler","dropdownList1","value","label","dropdownList2","dropdownList3","flexDirection","flexWrap","justifyContent","alignItems","alignContent","dropdownList4","alignSelf","flexBasis","order","flexGrow","flexShrink","CLICK_ON_PLUS_BTN","CLICK_ON_MINUS_BTN","CLICK_ON_RESET_BTN","DROPDOWN_SELECTION_HAPPENED","RESET_PARENT_VALUE_SELECTION_TO_NULL","RESET_CHILD_VALUE_SELECTION_TO_NULL","PARENTCOMPONENT_GETCOMPUTEDSTYLE","ACTIONBOX_WAS_CLICKED","UPDATE_COMPUTED_VALUE","state","parentCategory","parentComponent","userSelectedCategory","childCategory","childComponent","parentId","usedFor","thisDropdown","useRef","dropdownSelector","id","menu","dropdownID","dropdownMenu","renderedMenuOptions","map","item","dispatchTheseValues","selectedValue","clearPreviousValueFromDropdownMenu","current","selectedIndex","useState","disabledOnOrOff","setdisabledOnOrOff","useEffect","ref","onChange","disabled","clickedActionboxLetter","actionboxStyle","computedStyle","letterBackground","setLetterBackground","backgroundColor","Fragment","style","selectedCategoryParent","selectedCategoryChild","parentComputedStyle","childComputedStyle","categoryNames","Object","keys","selectionToHighlight","renderedList","categoryName","color","quantity","actionBox","previousNbr","frontFace","backFace","classList","toggle","addlPanelClassName","title","SettingsPanel","selectedCategory","userSelectedValue","triggerComponentToReset","bigLetterToDisplay","thisComponent","window","getComputedStyle","childComponentStye","cssText","parentComponentStye","renderedActionBoxes","Array","from","IDList","slice","App","initialStore","store","createStore","action","length","ReactDOM","render","document","getElementById"],"mappings":"6LAqBeA,iBAjBA,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAKrC,OACE,wBACEC,UAAS,cAAmB,UAAVF,EAAmB,eAAiB,IACtDG,QAAS,YAPQ,SAACJ,GACpBE,EAAS,CAAEG,KAAML,EAAWM,KAAMC,QAASP,EAAWO,UAOlDC,CAAaR,IAHjB,SAMGC,O,OCTMQ,EAAgB,CAC3B,CACEC,MAAO,gBACPC,MAAO,kBAET,CACED,MAAO,WACPC,MAAO,aAET,CACED,MAAO,iBACPC,MAAO,mBAET,CACED,MAAO,aACPC,MAAO,eAET,CACED,MAAO,eACPC,MAAO,kBAGEC,EAAgB,CAC3B,CACEF,MAAO,YACPC,MAAO,cAET,CACED,MAAO,YACPC,MAAO,cAET,CACED,MAAO,QACPC,MAAO,SAET,CACED,MAAO,WACPC,MAAO,aAET,CACED,MAAO,aACPC,MAAO,gBAIEE,EAAgB,CAC3BC,cAAe,CACb,CACEJ,MAAO,MACPC,MAAO,OAET,CACED,MAAO,cACPC,MAAO,eAET,CACED,MAAO,SACPC,MAAO,UAET,CACED,MAAO,iBACPC,MAAO,mBAIXI,SAAU,CACR,CACEL,MAAO,SACPC,MAAO,UAET,CACED,MAAO,OACPC,MAAO,QAET,CACED,MAAO,eACPC,MAAO,iBAGXK,eAAgB,CACd,CACEN,MAAO,SACPC,MAAO,UAET,CACED,MAAO,aACPC,MAAO,cAET,CACED,MAAO,WACPC,MAAO,YAET,CACED,MAAO,SACPC,MAAO,UAET,CACED,MAAO,gBACPC,MAAO,iBAET,CACED,MAAO,eACPC,MAAO,gBAET,CACED,MAAO,eACPC,MAAO,iBAGXM,WAAY,CACV,CACEP,MAAO,SACPC,MAAO,UAET,CACED,MAAO,UACPC,MAAO,WAET,CACED,MAAO,SACPC,MAAO,UAET,CACED,MAAO,aACPC,MAAO,cAET,CACED,MAAO,WACPC,MAAO,YAET,CACED,MAAO,WACPC,MAAO,aAGXO,aAAc,CACZ,CACER,MAAO,SACPC,MAAO,UAET,CACED,MAAO,UACPC,MAAO,W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","file":"static/js/main.bc12731d.chunk.js","sourcesContent":["//ADDITIONAL DESCRIPTION AT THE BOTTTOM\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst Button = ({ toDispatch, btnSign, dispatch }) => {\n  const clickHandler = (toDispatch) => {\n    dispatch({ type: toDispatch.text, payload: toDispatch.payload });\n  };\n\n  return (\n    <button\n      className={`btn ${btnSign!=='RESET'? 'btnPlusMinus' : ''}`}\n      onClick={() => {\n        clickHandler(toDispatch);\n      }}\n    >\n      {btnSign}\n    </button>\n  );\n};\n\nexport default connect()(Button);\n/*\nParent component: SettingsPanel, DropdownCard;\nChild components: none;\nThe component`s task:\nproviding plus/minus functionality to change the number of ActionBoxes\nreset parent setting dropdowns, clear redux store and trigger the change in the DemoScreen component`s css settings\nreset item (child component) setting dropdowns, clear redux store and trigger the change in all the Actionbox component`s css settings\n\ntoDispatch - object with text and payload properties\nthe toDispatch.text can be: CLICK_ON_PLUS_BTN, CLICK_ON_MINUS_BTN, CLICK_ON_RESET_BTN\nbtnSign - can be: + or - or reset\n*/\n","/*\n\ndropdownList1 - category selection for parent component settings\ndropdownList2 - category selection for child component settings\ndropdownList3 - value selections for parent component settings\ndropdownList4 - value selections for child component settings\n */\nexport const dropdownList1 = [\n  {\n    value: \"flexDirection\",\n    label: \"flex-direction\",\n  },\n  {\n    value: \"flexWrap\",\n    label: \"flex-wrap\",\n  },\n  {\n    value: \"justifyContent\",\n    label: \"justify-content\",\n  },\n  {\n    value: \"alignItems\",\n    label: \"align-items\",\n  },\n  {\n    value: \"alignContent\",\n    label: \"align-content\",\n  },\n];\nexport const dropdownList2 = [\n  {\n    value: \"alignSelf\",\n    label: \"align-self\",\n  },\n  {\n    value: \"flexBasis\",\n    label: \"flex-basis\",\n  },\n  {\n    value: \"order\",\n    label: \"order\",\n  },\n  {\n    value: \"flexGrow\",\n    label: \"flex-grow\",\n  },\n  {\n    value: \"flexShrink\",\n    label: \"flex-shrink\",\n  },\n];\n\nexport const dropdownList3 = {\n  flexDirection: [\n    {\n      value: \"row\",\n      label: \"row\",\n    },\n    {\n      value: \"row-reverse\",\n      label: \"row-reverse\",\n    },\n    {\n      value: \"column\",\n      label: \"column\",\n    },\n    {\n      value: \"column-reverse\",\n      label: \"column-reverse\",\n    },\n  ],\n\n  flexWrap: [\n    {\n      value: \"nowrap\",\n      label: \"nowrap\",\n    },\n    {\n      value: \"wrap\",\n      label: \"wrap\",\n    },\n    {\n      value: \"wrap-reverse\",\n      label: \"wrap-reverse\",\n    },\n  ],\n  justifyContent: [\n    {\n      value: \"normal\",\n      label: \"normal\",\n    },\n    {\n      value: \"flex-start\",\n      label: \"flex-start\",\n    },\n    {\n      value: \"flex-end\",\n      label: \"flex-end\",\n    },\n    {\n      value: \"center\",\n      label: \"center\",\n    },\n    {\n      value: \"space-between\",\n      label: \"space-between\",\n    },\n    {\n      value: \"space-around\",\n      label: \"space-around\",\n    },\n    {\n      value: \"space-evenly\",\n      label: \"space-evenly\",\n    },\n  ],\n  alignItems: [\n    {\n      value: \"normal\",\n      label: \"normal\",\n    },\n    {\n      value: \"stretch\",\n      label: \"stretch\",\n    },\n    {\n      value: \"center\",\n      label: \"center\",\n    },\n    {\n      value: \"flex-start\",\n      label: \"flex-start\",\n    },\n    {\n      value: \"flex-end\",\n      label: \"flex-end\",\n    },\n    {\n      value: \"baseline\",\n      label: \"baseline\",\n    },\n  ],\n  alignContent: [\n    {\n      value: \"normal\",\n      label: \"normal\",\n    },\n    {\n      value: \"stretch\",\n      label: \"stretch\",\n    },\n    {\n      value: \"center\",\n      label: \"center\",\n    },\n    {\n      value: \"flex-start\",\n      label: \"flex-start\",\n    },\n    {\n      value: \"flex-end\",\n      label: \"flex-end\",\n    },\n    {\n      value: \"space-between\",\n      label: \"space-between\",\n    },\n    {\n      value: \"space-around\",\n      label: \"space-around\",\n    },\n    {\n      value: \"space-evenly\",\n      label: \"space-evenly\",\n    },\n  ],\n};\n\nexport const dropdownList4 = {\n  alignSelf: [\n    { value: \"auto\", label: \"auto\" },\n    { value: \"normal\", label: \"normal\" },\n    { value: \"start\", label: \"start\" },\n    { value: \"end\", label: \"end\" },\n    { value: \"self-start\", label: \"self-start\" },\n    { value: \"self-end\", label: \"self-end\" },\n    { value: \"flex-start\", label: \"flex-start\" },\n    { value: \"flex-end\", label: \"flex-end\" },\n    { value: \"baseline\", label: \"baseline\" },\n    { value: \"stretch\", label: \"stretch\" },\n  ],\n  flexBasis: [\n    { value: \"auto\", label: \"auto\" },\n    { value: \"50%\", label: \"50%\" },\n    { value: \"25vw\", label: \"25vw\" },\n    { value: \"350px\", label: \"350px\" },\n  ],\n  order: [\n    { value: 0, label: 0 },\n    { value: 1, label: 1 },\n    { value: 2, label: 2 },\n    { value: 3, label: 3 },\n    { value: 4, label: 4 },\n    { value: 5, label: 5 },\n  ],\n  flexGrow: [\n    { value: 0, label: 0 },\n    { value: 1, label: 1 },\n    { value: 2, label: 2 },\n    { value: 3, label: 3 },\n    { value: 4, label: 4 },\n    { value: 5, label: 5 },\n  ],\n  flexShrink: [\n    { value: 1, label: 1 },\n    { value: 2, label: 2 },\n    { value: 3, label: 3 },\n    { value: 4, label: 4 },\n    { value: 5, label: 5 },\n  ],\n};\n","//BUTTONS\nexport const CLICK_ON_PLUS_BTN='CLICK_ON_PLUS_BTN';\nexport const CLICK_ON_MINUS_BTN='CLICK_ON_MINUS_BTN';\nexport const CLICK_ON_RESET_BTN='CLICK_ON_RESET_BTN';\n//DROPDOWNS\nexport const DROPDOWN_SELECTION_HAPPENED='DROPDOWN_SELECTION_HAPPENED';\nexport const RESET_PARENT_VALUE_SELECTION_TO_NULL='RESET_PARENT_VALUE_SELECTION_TO_NULL';\nexport const RESET_CHILD_VALUE_SELECTION_TO_NULL='RESET_CHILD_VALUE_SELECTION_TO_NULL';\n//PARENT COMPONENT\nexport const PARENTCOMPONENT_GETCOMPUTEDSTYLE='PARENTCOMPONENT_GETCOMPUTEDSTYLE';\n//CHILD COMPONENT - ACTIONBOX\nexport const ACTIONBOX_WAS_CLICKED='ACTIONBOX_WAS_CLICKED';\nexport const UPDATE_COMPUTED_VALUE='UPDATE_COMPUTED_VALUE';\n\n\n// export const GETCOMPUTEDSTYLE_FOR_CHILDCOMPONENT='GETCOMPUTEDSTYLE_FOR_CHILDCOMPONENT';\n// export const SELECTED_CATEGORY_PARENT='SELECTED_CATEGORY_PARENT';\n// export const SELECTED_VALUE_PARENT='SELECTED_VALUE_PARENT';\n// export const SELECTED_CATEGORY_CHILD='SELECTED_CATEGORY_CHILD';\n// export const SELECTED_VALUE_CHILD='SELECTED_VALUE_CHILD';\n// export const RESET_PARENT_SETTINGS='RESET_PARENT_SETTINGS';\n// export const RESET_CLICKED_ACTIONBOX_SETTINGS='RESET_CLICKED_ACTIONBOX_SETTINGS';\n\n","//ADDITIONAL DESCRIPTION AT THE BOTTTOM\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  dropdownList1, //source of the parent category dropdown list\n  dropdownList2, //source of the child category dropdown list\n  dropdownList3, //source of the parent value dropdown lists\n  dropdownList4, //source of the child value dropdown lists\n} from \"../../data/dropdownContent\";\nimport {\n  //for code readability I deliberately use 3 different actions, although even 1 could achieve the same goal\n  DROPDOWN_SELECTION_HAPPENED,\n  RESET_PARENT_VALUE_SELECTION_TO_NULL,\n  RESET_CHILD_VALUE_SELECTION_TO_NULL,\n} from \"../../actions/actionTypes\";\n\nconst Dropdown = ({\n  dispatch,\n  parentCategory, //category selection for parent component\n  childCategory, //category selection for child component\n  parentId, //value can be 'parent settings' OR 'item settings'\n  usedFor, //value can be 'categorySelection' OR 'valueSelection'\n}) => {\n  const thisDropdown = useRef(); //reference to the dropdown list\n\n  //TO DETERMINE WHICH OF THE 4 DROPDOWN ROLES TO APPLY TO THIS PARTICULAR CASE:\n  const dropdownSelector = (parentId, usedFor) => {\n    switch (true) {\n      case parentId === \"parent settings\" && usedFor === \"categorySelection\":\n        return { id: \"PC\", menu: dropdownList1 }; //PC=parent category\n      case parentId === \"parent settings\" && usedFor === \"valueSelection\":\n        return {\n          id: \"PV\", //PV=parent value\n          menu: parentCategory ? dropdownList3[parentCategory] : null,\n        };\n      case parentId === \"item settings\" && usedFor === \"categorySelection\":\n        return { id: \"IC\", menu: dropdownList2 }; //IC=item category\n      case parentId === \"item settings\" && usedFor === \"valueSelection\":\n        return {\n          id: \"IV\", //IV=item value\n          menu: childCategory ? dropdownList4[childCategory] : null,\n        };\n      default:\n        return;\n    } //end switch\n  }; //end dropdownSelector\n\n  //WHAT IS THE CURRENT ID, AND WHAT OPTION LIST TO APPLY?\n  const dropdownID = dropdownSelector(parentId, usedFor).id; //can be one of these four options: PC/PV/IC/IV\n  const dropdownMenu = dropdownSelector(parentId, usedFor).menu;\n\n  //RENDERING THE OPTIONS FOR <select/> ELEMENT:\n  const renderedMenuOptions = dropdownMenu\n    ? dropdownMenu.map((item) => {\n        return (\n          <option key={item.value} value={item.value}>\n            {item.label}\n          </option>\n        );\n      })\n    : null;\n\n  //BOILERPLATE FN TO DISPATCH DROPDOWN SELECTION TO REDUX STORE:\n  const dispatchTheseValues = (text, id, value) => {\n    dispatch({\n      type: text,\n      payload: {\n        dropdownID: id,\n        selectedValue: value,\n      },\n    });\n  };\n\n  //BOILERPLATE FN TO CLEAR PREVIOUS SELECTION\n  const clearPreviousValueFromDropdownMenu = () => {\n    thisDropdown.current.selectedIndex = -1;\n  };\n\n  //IF A DROPDOWN OPTION IS SELECTED:\n  const handleSelection = () => {\n    const selectedValue = thisDropdown.current.value; //this is the current dropdown selection\n    dispatchTheseValues(DROPDOWN_SELECTION_HAPPENED, dropdownID, selectedValue);\n  };\n\n  //SOMETIMES WE NEED THE DROPDOWN MENU DISABLED:\n  const [disabledOnOrOff, setdisabledOnOrOff] = useState(true); //hande <select disabled/>\n\n  //WHAT SHOULD HAPPEN WITH THE VALUE DROPDOWN IF CATEGORY SELECTION CHANGES?\n  //...if this is happening in the parent settings component:\n  useEffect(() => {\n    if (dropdownID === \"PV\") {\n      //reset the value in Redux store\n      dispatchTheseValues(\n        RESET_PARENT_VALUE_SELECTION_TO_NULL, //if parent category dropdown changes, reset value dropdown\n        dropdownID,\n        null //new value for value selection\n      );\n      clearPreviousValueFromDropdownMenu(); //clear dropdown menu @ value selection\n      //toggle access and visibility (disabled property)\n      if (!parentCategory) {\n        //note: this if is embedded >>> (if dropdownID==='PV' && !parendSelectedCategory); dont confuse it with what is happening a few lines below!\n        setdisabledOnOrOff(true);\n      } else {\n        setdisabledOnOrOff(false);\n      }\n    } //end if dropdownID === \"PV\"\n    if (!parentCategory) {\n      //this code snippet belongs to reset button click\n      clearPreviousValueFromDropdownMenu(); //reset button click triggers the change in\n      //state.parentComponent.userSelected Category/value = null in the Redux Store;\n      //this action requires to clear the dropdownfield as well\n    }\n  }, [parentCategory]);\n  //...if this is happening in the item settings component:\n  useEffect(() => {\n    if (dropdownID === \"IV\") {\n      //if child category dropdown changes, reset it`s value selection dropdown menu\n      dispatchTheseValues(\n        RESET_CHILD_VALUE_SELECTION_TO_NULL, //reset the value in Redux store\n        dropdownID,\n        null //to this new value\n      );\n      clearPreviousValueFromDropdownMenu(); //clear dropdown menu\n      //toggle access and visibility (disabled property)\n      if (!childCategory) {\n        //note: this is also an embedded if statement, not the same as a few lines below!\n        setdisabledOnOrOff(true); //<select/> is disabled\n      } else {\n        setdisabledOnOrOff(false); //NOT disabled\n      }\n    } //end if dropdownID === \"IV\"\n    if (!childCategory) {\n      //this code snippet belongs to reset button click\n      clearPreviousValueFromDropdownMenu();\n      //reset button click triggers change in state.childComponent.userSelected Category/Value = null in the Redux Store.\n      //This action requires to clear the dropdownfield as well\n    }\n  }, [childCategory]);\n  //END OF: WHAT SHOULD HAPPEN WITH THE VALUE.... code snippet\n\n  //RENDERING THE DROPDOWN COMPONENT:\n  return (\n    <div>\n      <select\n        ref={thisDropdown} //part of useRef hook\n        onChange={handleSelection}\n        disabled={usedFor === \"valueSelection\" ? disabledOnOrOff : false}\n      >\n        <option></option>\n        {renderedMenuOptions}\n      </select>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    parentCategory: state.parentComponent.userSelectedCategory,\n    childCategory: state.childComponent.userSelectedCategory,\n  };\n};\nexport default connect(mapStateToProps)(Dropdown);\n\n/*\nParent component: DropdownCard;\nChild component: none;\nThe component`s task:\nthe dropdown menu provides 4 dropdowns:\n-parent component setting: flexbox category selection\n-parent component setting: flexbox value selection for the selected category\n-child component setting: flexbox category selection\n-child component setting: flexbox value selection for the selected category\nto determine which use of the 4 roles above is applied to the <Dropdown/> component\nthere is a function called: dropdownSelector\n\ndropdownSelector FN takes to arguments (parent component and usedFor), and generates an ID \nand a dropdown menu (=options to select) for every usecase\nIf the dropdown is used for value selection (the two lower dropdowns), the menu always\nreset to clear line whenever the category changes (also it`s value stored in Redux Store will be null)\n\ndispatchTheseValues FN will dispatch the selection to the Redux Store\n\nhandleSelection FN is linked to the selection`s onChange property. It will call the dispatchTheseValues FN,\nand assigns value to it.\n\nclearPreviousValueFromDropdownMenu FN makes the dropdown line empty\n\nthere is a huge section of the code above with this comment: //WHAT SHOULD HAPPEN WITH THE VALUE DROPDOWN IF CATEGORY SELECTION CHANGES?\ntwo useEffects are dealing with this question: one for parent settings and the other for item settings\nif the category changes, the previous value selection should be cleared, and it`s previous value should be cleared from the Redux Store.\n\nif the RESET button is clicked, it clears the dropdown selection to empty (both category and value selections for both parent/item panels)\nit will turn the category data and the value selection data in the Redux Store to null. (this code is among Button/DropdownCard component code)\nWhen the category data becomes null, here the two useEffects notice this change, and the if (!parentCategory) or if (!childCategory) code \nsnippets take care that part when they need to clear the previous displayed option to empty line.\n*/\n","//ADDITIONAL DESCRIPTION AT THE BOTTTOM\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"../subComponents/Button\";\nimport DropDown from \"../subComponents/Dropdown\";\nimport { CLICK_ON_RESET_BTN } from \"../../actions/actionTypes\";\nimport { useEffect, useState } from \"react\";\n\nconst DropDownCard = ({\n  parentId,\n  clickedActionboxLetter, //visual feedback to show which actionbox is currently selected\n  actionboxStyle, //background color for clickedActionboxLetter\n}) => {\n  //SET UP BACKGROUND COLOR FOR REFERENCE LETTER (SAME COLOR AS THE CURRENTLY CLICKED ACTIONBOX HAS)\n  const [letterBackground, setLetterBackground] = useState(\"transparent\");\n  useEffect(() => {\n    if (actionboxStyle) {\n      setLetterBackground(actionboxStyle.backgroundColor);\n    } else {\n      setLetterBackground(\"transparent\");\n    }\n  }, [actionboxStyle]); //depending on the currently clicked actionbox\n\n  //COMPONENT RENDERING:\n  return (\n    <div>\n      <React.Fragment>\n        {/* colored reference letter box - visible only at item settings panel*/}\n        {parentId === \"item settings\" && clickedActionboxLetter ? (\n          <div\n            className=\"referenceLetter\"\n            style={{ backgroundColor: letterBackground }}\n          >\n            {clickedActionboxLetter}\n          </div>\n        ) : null}\n      </React.Fragment>\n      {/* two dropdowns with titles and reset button: parent settings: ALWAYS visible, item settings: VISIBLE ONLY IF....*/}\n      {parentId === \"parent settings\" ||\n      (parentId === \"item settings\" && clickedActionboxLetter) ? (\n        <React.Fragment>\n          <h4>select a category</h4>\n          <DropDown parentId={parentId} usedFor={\"categorySelection\"} />\n          <h4>select a value</h4>\n          <DropDown parentId={parentId} usedFor={\"valueSelection\"} />\n          <Button\n            btnSign={\"RESET\"}\n            toDispatch={{ text: CLICK_ON_RESET_BTN, payload: parentId }}\n          />\n        </React.Fragment>\n      ) : (\n        <p>click on a colored box to activate this panel</p>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    clickedActionboxLetter: state.childComponent.clickedActionboxLetter,\n    actionboxStyle: state.childComponent.computedStyle,\n  };\n};\nexport default connect(mapStateToProps)(DropDownCard);\n\n/*\nParent component: SettingsPanel;\nChild components: Dropdown, Button;\nThe component`s task:\n-at parent setting provide two dropdowns to modify the flexbox settings applicable to parent component (DemoScreen);\n  the reset button will re-set the initial flexbox values for the DemoScreen;\n-at item setting: modify the flexbox settings applicable for child component (only to the clicked ActionBox)\n  the reset button will re-set all actionbox settings to the initial values;\n  please note that the item setting`s elements are visible only if the user clicks on any colored actionbox.\n\nparentId - determines if the dropdown is used for parent component setting (=modify the DemoScreen component) \nor item setting (=modify the clicked actionbox solely);\nIt is coming from the SettingsPanel, and it value is the same as the panel title (parent settings or item settings)\n\nusedFor -determines if the drpdown is for category selection, or\nfinetuning the category with value selection; example: align-items(=category) flex-start/center/baseline/normal etc(=value)\n\nclickedActionboxLetter- is the feedback of the selected(clicked) actionbox. Should be the same character as on the clicked actionBox. \nIt appears only when an actionbox is clicked so the user knows which is the 'child compononent' for the flexbox settings;\nthe background color for the square that contains the clickedActionboxLetter is the same as the currently selected ActionBox has.\nIf nothing is selected, the background color is transparent.\n\nthe HTML structure of this component in plain English:\nthe colored reference letter box is visible only at item settings panel\nthe two dropdowns with titles and reset button at parent setting panel -ALWAYS VISIBLE\nthe two dropdowns with titles and reset button at parent item panel is VISIBLE ONLY IF clickedActionboxLetter is true (the user clicked on any actionbox)\n*/\n","//ADDITIONAL DESCRIPTION AT THE BOTTTOM\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { dropdownList3, dropdownList4 } from \"../../data/dropdownContent\";\n\nconst InfoCard = ({\n  parentId, //this value could be parent settings OR item settings\n  parentComputedStyle, //window.getComputedStyle() values for the DemoScreen component\n  childComputedStyle, //window.getComputedStyle() values for the clicked ActionBox component\n  selectedCategoryParent, //dropdown menu selection for the parent component\n  selectedCategoryChild, //dropdown menu selection for the selected child component\n}) => {\n  const categoryNames = Object.keys(\n    //depending on parent or item setting dropdown, we use different data set to display as keys\n    parentId === \"parent settings\" ? dropdownList3 : dropdownList4\n  );\n  \n  const selectionToHighlight =\n    parentId === \"parent settings\"\n      ? selectedCategoryParent //drodown>store>infoCard\n      : selectedCategoryChild; //drodown>store>infoCard\n\n  const computedStyle =\n    //shorthand to replace parentComputedStyle or childComputedStyle depending on where we are\n    parentId === \"parent settings\" ? parentComputedStyle : childComputedStyle;\n\n  //RENDERING THE KEY-VALUE PAIRS\n  const renderedList = categoryNames.map((categoryName) => {\n    return (\n      <li\n        key={categoryName}\n        style={{\n          color: selectionToHighlight === categoryName ? \"white\" : \"black\",\n        }} //conditional styling\n      >\n        <p>{categoryName}:</p>\n        <p>\n          <span>{computedStyle ? computedStyle[categoryName] : \"-\"}</span>\n        </p>\n      </li>\n    );\n  });\n\n  //REDNERING THE COMPONENT\n  return (\n    <React.Fragment>\n      <h4>current settings:</h4>\n      <ul>{renderedList}</ul>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedCategoryParent: state.parentComponent.userSelectedCategory, //this will be the key at parent settings\n    selectedCategoryChild: state.childComponent.userSelectedCategory, //this will be the key at child settings\n    parentComputedStyle: state.parentComponent.computedStyle, //this will be the value at parent settings\n    childComputedStyle: state.childComponent.computedStyle, //this will be the value at child settings\n  };\n};\nexport default connect(mapStateToProps)(InfoCard);\n\n/*\nParent component: SettingsPanel;\nChild components: none;\nThe component`s task:\nINFOCARD COMPONENTS SERVES AS A WRITTEN FEEDBACK ABOUT THE CURRENT FLEXBOX SETTINGS;\nDEPENDING ON ITS LOCATION IT SERVES THE PARENT COMPONENT SETTTINGS \nAND THE ITEM SETTINGS (THIS IS THE INDIVIDUAL ACTIONBOX THE USER CLICKED ON)\nAs the user clicks on a dropdown menu, the selected flexbox category and its current value\nwill be highlighted with white text color (default: black)\nFor the ActionBox settings the values are not visible till the user clicks(selects) one\n\nIMPORTed data: dropdownList3, dropdownList4 - this is raw data from the dropdown menus\n\nPROPS:\nparentId- this is used to determine if the component is used for parent setting or Item setting\nparentComputedStyle, childComputedStyle - window.getcomputedstyle() values for the clicked ActionBox or the DemoScreen component\nfor the Actionboxes their value is calculated at every click; for the DemoScreen it is calculated when the user selects a value \nfrom the value dropdown (upper dropdowns are the category selections, the lower dropdowns are the value selections )\n\ncategoryNames-the list of all the dropdown opions ; these will be seen in every odd lines (1st, 3rd, etc)\n\nselectionToHighlight- determines if we are in the parent setting or item setting panel. Then highlights the currently selected text for that compononent.\n\nrenderedList-map() thru all the dropdown options (options are different depending on parent or individual actionbox settings)\nand create a <li/> from every dropdown line. \nin the <li/> the categoryName represents the category, computedStyle[categoryName] represents it`s current value\n*/\n","import React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\nconst FlippingCard = ({ parentId, quantity }) => {\n  let previousNbr = useRef(quantity); //tracking previous ActionBox quantity\n  let frontFace = useRef(); //front side of the flipping card\n  let backFace = useRef(); //back side of the flipping card\n\n  useEffect(() => {\n    //when ActionBox quantity changes, save the 'old' number value and add new classNames to frontSide and backSide f the flipping card\n    if (parentId === \"items\") {//only if we are at the right panel (items)      \n      previousNbr.current = quantity; //save the old value\n      frontFace.current.classList.toggle(\"rotateFrontFace\"); //toggle className responsible for rotating the front side\n      backFace.current.classList.toggle(\"rotateBackFace\"); //toggle className responsible for rotating the back side\n    }\n  }, [quantity]);\n\n  //RENDERING THE COMPONENT:\n  return (\n    <React.Fragment>\n      <div className=\"flippingCard frontFace\" ref={frontFace}>\n        {quantity % 2 === 1 ? previousNbr.current : quantity}\n      </div>\n      <div className=\"flippingCard backFace\" ref={backFace}>\n        {quantity % 2 === 0 ? previousNbr.current : quantity}\n      </div>\n    </React.Fragment>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    quantity: state.actionBox.quantity,\n  };\n};\nexport default connect(mapStateToProps)(FlippingCard);\n\n","//ADDITIONAL DESCRIPTION AT THE BOTTTOM\nimport React from \"react\";\nimport Button from \"../subComponents/Button\";\nimport DropDownCard from \"../subComponents/DropdownCard\";\nimport InfoCard from \"../subComponents/InfoCard\";\nimport FlippingCard from \"../subComponents/FlippingCard\";\nimport {\n  CLICK_ON_PLUS_BTN,\n  CLICK_ON_MINUS_BTN,\n} from \"../../actions/actionTypes\";\n\nconst addlPanelClassName = (title) => {\n  if (title === \"panel\") {\n    return \"itemsPanel\";\n  } else if (title === \"parent settings\") {\n    return \"parentSettingsPanel\";\n  } else {\n    return \"itemSettingsPanel\";\n  }\n};\nconst SettingsPanel = ({ title }) => {\n  return (\n    <div className={`panel ${addlPanelClassName(title)}`}>\n      <div className=\"panelTitle\">\n        <h3>{title}</h3>\n      </div>\n      <div className=\"panelColumn\">\n        {title === \"items\" ? (\n          <FlippingCard parentId={title} />\n        ) : (\n          <DropDownCard parentId={title} />\n        )}\n      </div>\n\n      <div className=\"panelColumn\">\n        {title === \"items\" ? (\n          <>\n            <Button\n              btnSign={\"+\"}\n              toDispatch={{ text: CLICK_ON_PLUS_BTN, payload: null }}\n            />\n            <Button\n              btnSign={\"-\"}\n              toDispatch={{ text: CLICK_ON_MINUS_BTN, payload: null }}\n            />\n          </>\n        ) : (\n          <InfoCard parentId={title} />\n        )}\n      </div>\n    </div>\n  );\n};\nexport default SettingsPanel;\n/*\nParent component: App.js;\nChild components: DropdownCard, Button, InfoCard, FlippingCard;\nThe component`s task:\nThis panel occupies the left column of the screen. There are 3 settingspanels present on the left column.\nDepending on it`s task it can accomodate the\n\n-ITEMS : buttons and a flipping sign about the quantity of the ActionBoxes\n\n-PARENT SETTINGS: a dropdownCard with two dropdowns(left) and an Infocard (right) to inform\n  the current parent component flexbox settings\n\n-ITEM SETTINGS: (or child component settings). It also contains a a dropdownCard with two dropdowns,\n  and an Infocard. The settings and the information is directing/getting from the currently clicked ActionBox\n*/\n","//ADDITIONAL DESCRIPTION AT THE BOTTTOM\nimport React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  ACTIONBOX_WAS_CLICKED,\n  UPDATE_COMPUTED_VALUE,\n} from \"../../actions/actionTypes\";\nimport { defaultFlexboxSettings } from \"../../data/actionBoxData\"; //css data to restore the initial settings\n\nconst ActionBox = ({\n  bigLetterToDisplay, //serves as unique ID on the Actionbox\n  dispatch,\n  clickedActionboxLetter, //feedback fro item settings panel to notify which actionbox was clicked\n  selectedCategory, //item settings panel, upper dropdown value\n  selectedValue, //item settings panel, lower dropdown value\n  triggerComponentToReset, //fake counter; I use it to detect change; the change triggers a full res-set to initial value for all Actionboxes\n}) => {\n  const thisComponent = useRef(); //useRef.current is referencing this component\n\n  //boilerplate FN to read the current FlexBox settings\n  const computedStyle = () => {\n    return window.getComputedStyle(thisComponent.current, null);\n  };\n\n  //IF THE USER CLICKS ON AN ACTIONBOX, send the current styling info to the Redux Store > InfoCard\n  const clickHandler = () => {\n    dispatch({\n      type: ACTIONBOX_WAS_CLICKED,\n      payload: {\n        childComponentStye: computedStyle(),\n        clickedActionboxLetter: bigLetterToDisplay,\n      },\n    });\n  };\n\n  //IF THE USER CHANGES A DROPDOWN VALUE (on the item settings panel, lower dropdown <--value selection), apply the change to this particular ActionBox\n  useEffect(() => {\n    //if an action box is already selected (clicked), and this is that particular actionbox...\n    if (selectedValue && clickedActionboxLetter === bigLetterToDisplay) {\n      thisComponent.current.style[selectedCategory] = selectedValue; //apply the new style based on the two dropdown selections (category + value) from item settings panel\n      dispatch({\n        //and notify the store about the new value, so the InfoCard (current settings) can display the latest data\n        type: UPDATE_COMPUTED_VALUE,\n        payload: { childComponentStye: computedStyle() },\n      });\n    }\n  }, [selectedValue]);\n\n  //IF RESET BTN IS CLICKED, RESET TO INITIAL CSS SETTINGS\n  useEffect(() => {\n    thisComponent.current.style.cssText = defaultFlexboxSettings;\n  }, [triggerComponentToReset]);\n\n  //RENDERING THE ACTIONBOX COMPONENT\n  return (\n    <div ref={thisComponent} className=\"actionBox\" onClick={clickHandler}>\n      {bigLetterToDisplay}\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    clickedActionboxLetter: state.childComponent.clickedActionboxLetter, //reference from item settiings panel to identify which is the active actionbox\n    selectedCategory: state.childComponent.userSelectedCategory, //item settings panel, category dropdown selection\n    selectedValue: state.childComponent.userSelectedValue, //item settings panel, value dropdown selection\n    triggerComponentToReset: state.childComponent.triggerComponentToReset, //fake counter.What I use it for is to detect any change. THe change triggers all actionboxes to re-set initial css settings\n  };\n};\nexport default connect(mapStateToProps)(ActionBox);\n/*\nParent component: DemoScreen;\nChild components: none;\nThe component`s task:\nto display the effects of the different Flexbox settings the user can set with dropdown menus.\nPlease be aware how the Flexbox works. Some settings are pallicable only to parent components  (in this app this is the DemoScreen).\nSome settings are applicable to the child components (in this App these are the individual ActionBoxes)\n\nSo an ActionBox (colored box with big letter on the right side of the screen) represents a child component from Flexbox point of view.\nHence my goal with this app is to show the effect of the flexbox settings, and not allow to try all the possible options the universe can offer,\nI took the liberty to limit the users` option in some cases.\nWhat do I mean by that? For example: the flex-basis property could be a combination of any number and any unit in real life. In this app the\nuser can select from my a few pre-determined options only.\nAlthough certainly we can achieve that with an inputfield or an inputfield/dropdown combo, this is beyond what I want to achieve with this App, \nwhich is merely to try out a few flex-box settings, or the combined effects of different settings.\n*/\n","/*\nlist of unique IDs to render the ActionBoxes;\nevery character in the string serves as unique id for the ActionBoxes \nthe maximum number of actionBoxes is limited to the legth of this string- not that we need all of them...ever!\n*/\nexport const IDList =\n  \"ABCDEFGHIJKLMNOPQRSTUVXYWZ0123456789!@#$%&*()-+=<>/?|abcdefghijklmnopqrstuvxywz\";\n/*\nnumber of initial ActionBoxes;\namount can be modified with +/- buttons\n*/\nexport const quantity = 5;\n\n//pressing the reset button will trigger to re-set all the actionbox flexbox settings to the initial state, which is this:\nexport const defaultFlexboxSettings =\n  \"alignSelf: 'auto'; flexBasis: 'auto'; order: 0; flexGrow: 0;flexShrink: 1;\";\n","//ADDITIONAL DESCRIPTION AT THE BOTTTOM\nimport React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport ActionBox from \"../subComponents/ActionBox\"; //colored small boxes with big letters on them\nimport { resetToInitialFlexboxSettings } from \"../../data/demoScreenData\"; //css settings in string format\nimport { PARENTCOMPONENT_GETCOMPUTEDSTYLE } from \"../../actions/actionTypes\";\n\nconst DemoScreen = ({\n  actionBox, //all actionbox data: quantity & IdList\n  selectedCategory, //dropdown value for parent component category selection\n  selectedValue, //dropdown value for parent component value selection\n  dispatch, //to dispatch data to Redux Store\n  triggerComponentToReset, //fake counter; it`s change triggers this component to re-set initial flexbox values\n}) => {\n  const thisComponent = useRef(); //useRef.current is referencing to this component (from flexbox perspective this is the entire PARENT COMPONENT)\n\n  //READ CURRENT SETTING & APPLLY NEW FLEXBOX SETTINGS:\n  useEffect(() => {\n    //get and dispatch current computed style of the PARENT component whenever any change occurs in dropdown selection:\n    const parentComponentStye = window.getComputedStyle(\n      thisComponent.current,\n      null\n    ); //reading the current css settings\n    dispatch({\n      //sending it to Redux Store\n      type: PARENTCOMPONENT_GETCOMPUTEDSTYLE,\n      payload: { parentComponentStye }, //a few lines earlier previously read via window.getComputedStyle()\n    });\n    //setting new flexbox values as per the user changes dropdown selection:\n    if (selectedValue) {\n      thisComponent.current.style[selectedCategory] = selectedValue;\n      //no need to trigger this event with selectedCategory, because the user can access to value selection if already the category is already selected.\n      //the complete new setting consist the category and the value selection together. Value selection is the last step, so that can trigger to apply the new settings to the component/\n    }\n  }, [selectedValue]);\n\n  //RESET INITIAL FLEXBOX SETTINGS:\n  useEffect(() => {\n    thisComponent.current.style.cssText = resetToInitialFlexboxSettings; //reset button click will assign the initial flexbox settings to this component\n  }, [triggerComponentToReset]);\n\n  //ACTIONBOXES TO SHOW INSIDE THE COMPONENT\n  //get a slice from all possible actionBox IDs - this will determine how many boxes can we see on the screen\n  const renderedIDs = Array.from(actionBox.IDList.slice(0, actionBox.quantity)); //quantity can be adjusted by +/- button clicks\n  //rendering as many actionboxes as many IDs we have above\n  const renderedActionBoxes = renderedIDs.map((bigLetterToDisplay) => {\n    return (\n      <ActionBox\n        key={bigLetterToDisplay}\n        bigLetterToDisplay={bigLetterToDisplay}\n      />\n    );\n  });\n\n  //RENDERING THE DEMOSCREEN COMPONENT ITSELF:\n  return (\n    <div\n      ref={thisComponent} //useRef was assigned above\n      className={\"demoScreen\"}\n    >\n      {renderedActionBoxes}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    actionBox: state.actionBox, //all actionbox data: quantity & IdList\n    selectedCategory: state.parentComponent.userSelectedCategory, //dropdown menu (category) selection - parent settings\n    selectedValue: state.parentComponent.userSelectedValue, //dropdown menu (value) selection - parent settings\n    triggerComponentToReset: state.parentComponent.triggerComponentToReset, //to oversee if the component needs to reset to initial Flexbox setting (to pre-userselections)\n  };\n};\nexport default connect(mapStateToProps)(DemoScreen);\n/*\nParent component: App.js;\nChild components: ActionBox;\nThe component`s task:\nto display the effects of all kind of flexbox settings. Those can be selected and adjusted by the user via the dropdown menus.\nPlease be aware that there are two major branches of all the flexbox settings. One branch is applicable to the parent component (this is it)\nand the other branch of settings is applicable on child component (in this app: ActionBoxes)\nAll the accumulated effect of the  parent settings dropdowns will be visible on this component (if the effect is visible by nature)\n*/\n","export const resetToInitialFlexboxSettings =\n  \"flex-direction: row; flex-wrap: nowrap;justify-content: normal;align-items: normal;align-content: normal;\";\n","import React from \"react\";\nimport \"./App.css\";\n\nimport SettingsPanel from './components/mainComponents/SettingsPanel';\nimport DemoScreen from \"./components/mainComponents/DemoScreen\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"settingsSide\">\n        <SettingsPanel title={\"items\"} />\n        <SettingsPanel title={\"parent settings\"} />\n        <SettingsPanel title={\"item settings\"} />\n      </div>\n      <div className=\"demoSide\">\n        <DemoScreen />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore } from \"redux\";\nimport { reducer } from \"../reducers\";\nimport { quantity, IDList } from \"./actionBoxData\";\n\nconst initialStore = {\n  actionBox: {\n    quantity, //how many boxes to display\n    IDList, //string of unique letters and characters to display on Actionboxes and to act as unique ID for them\n  },\n  parentComponent: {\n    computedStyle: null, //window.getComputedStyle() for DemoScreen component\n    userSelectedCategory: null, //dropdown selection from the upper menu (parent settings)\n    userSelectedValue: null, //dropdown selection from the lower menu (parent settings)\n    triggerComponentToReset: 0,\n  },\n  childComponent: {\n    computedStyle: null, //window.getComputedStyle() for the clicked ActionBox\n    userSelectedCategory: null, //dropdown selection from the upper menu (item settings)\n    userSelectedValue: null, //dropdown selection from the lower menu (item settings)\n    clickedActionboxLetter: null, //letter to display under the dropdown\n    triggerComponentToReset: 0,\n  },\n};\nexport const store = createStore(reducer, initialStore);\n","import {\n  CLICK_ON_PLUS_BTN, //dispatch is coming from SettingsPanel>Button\n  CLICK_ON_MINUS_BTN, //dispatch is coming from SettingsPanel>Button\n  CLICK_ON_RESET_BTN, //dispatch is coming from DropdownCard>Button\n  DROPDOWN_SELECTION_HAPPENED, //dispatch is coming from Dropdown\n  RESET_PARENT_VALUE_SELECTION_TO_NULL, //dispatch is coming from Dropdown\n  RESET_CHILD_VALUE_SELECTION_TO_NULL, //dispatch is coming from Dropdown\n  PARENTCOMPONENT_GETCOMPUTEDSTYLE, //dispatch is coming from DemoScreen\n  UPDATE_COMPUTED_VALUE, //dispatch is coming from Actionbox\n  ACTIONBOX_WAS_CLICKED, //dispatch is coming from Actionbox\n} from \"../actions/actionTypes\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case CLICK_ON_PLUS_BTN: //the nuber of actionboxes will increase\n      if (state.actionBox.quantity < state.actionBox.IDList.length) {\n        return {\n          ...state,\n          actionBox: {\n            ...state.actionBox,\n            quantity: state.actionBox.quantity + 1,\n          },\n        };\n      }\n      return state; //end case CLICK_ON_PLUS_BTN\n\n    case CLICK_ON_MINUS_BTN: //the nuber of actionboxes will decrease\n      if (state.actionBox.quantity > 0) {\n        return {\n          ...state,\n          actionBox: {\n            ...state.actionBox,\n            quantity: state.actionBox.quantity - 1,\n          },\n        };\n      }\n      return state; //end case CLICK_ON_MINUS_BTN\n\n    case CLICK_ON_RESET_BTN: //all the previously changed settings will be re-set to initial values\n      if (action.payload === \"parent settings\") {\n        //re-set Parent component\n        return {\n          ...state,\n          parentComponent: {\n            ...state.parentComponent,\n            userSelectedCategory: null,\n            userSelectedValue: null,\n            triggerComponentToReset:\n              state.parentComponent.triggerComponentToReset + 1, //false counter; what i need is a usefect to monitor the change; copul.d be boolean, too\n          },\n        };\n      } else {\n        //re-set child component\n        return {\n          ...state,\n          childComponent: {\n            ...state.childComponent,\n            userSelectedCategory: null,\n            userSelectedValue: null,\n            clickedActionboxLetter:null,\n            computedStyle:null,\n            triggerComponentToReset:\n              state.childComponent.triggerComponentToReset + 1, //false counter; what i need is a usefect to monitor the change; copul.d be boolean, too\n          },\n        };\n      } // end case CLICK_ON_RESET_BTN:\n\n    //these are all Dropdown component dispatches;\n    //the reason I did use 3 different messages for the same effect  is the code readability\n    case DROPDOWN_SELECTION_HAPPENED:\n    case RESET_PARENT_VALUE_SELECTION_TO_NULL:\n    case RESET_CHILD_VALUE_SELECTION_TO_NULL:\n      if (action.payload.dropdownID === \"PC\") {\n        return {\n          ...state,\n          parentComponent: {\n            ...state.parentComponent,\n            userSelectedCategory: action.payload.selectedValue,\n          },\n        };\n      } else if (action.payload.dropdownID === \"PV\") {\n        return {\n          ...state,\n          parentComponent: {\n            ...state.parentComponent,\n            userSelectedValue: action.payload.selectedValue,\n          },\n        };\n      } else if (action.payload.dropdownID === \"IC\") {\n        return {\n          ...state,\n          childComponent: {\n            ...state.childComponent,\n            userSelectedCategory: action.payload.selectedValue,\n          },\n        };\n      } else if (action.payload.dropdownID === \"IV\") {\n        return {\n          ...state,\n          childComponent: {\n            ...state.childComponent,\n            userSelectedValue: action.payload.selectedValue,\n          },\n        };\n      } else {\n        return state;\n      } //end case DROPDOWN_SELECTION/RESET_PARENT_VALUE_SELECTION/RESET_CHILD_VALUE\n\n    case PARENTCOMPONENT_GETCOMPUTEDSTYLE: //update current style info so the Infocard can display the latest one\n      return {\n        ...state,\n        parentComponent: {\n          ...state.parentComponent,\n          computedStyle: action.payload.parentComponentStye,\n        },\n      }; //end case PARENTCOMPONENT_GETCOMPUTEDSTYLE\n\n    case ACTIONBOX_WAS_CLICKED: //update current style info so the Infocard can display the latest one\n      return {\n        ...state,\n        childComponent: {\n          ...state.childComponent,\n          computedStyle: action.payload.childComponentStye,\n          clickedActionboxLetter: action.payload.clickedActionboxLetter,\n          userSelectedCategory: null, //clear previous data that belongs to different actionBox\n          userSelectedValue: null,\n        },\n      }; //end case ACTIONBOX_WAS_CLICKED:\n\n    case UPDATE_COMPUTED_VALUE: //update actionbox styling with the latest dropdown selections\n      return {\n        ...state,\n        childComponent: {\n          ...state.childComponent,\n          computedStyle: action.payload.childComponentStye,\n        },\n      }; //end case UPDATE_COMPUTED_VALUE\n\n    default:\n      return state;\n  } //end if switch statement\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './data/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}